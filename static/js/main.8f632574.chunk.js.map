{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","getLocalTodos","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","test","newTodos","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f632574.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nconst TodoForm = (props) => {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        })\r\n\r\n        setInput('');\r\n    }\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            {\r\n                props.edit ? (\r\n                    <>\r\n                        <input\r\n                            text=\"text\"\r\n                            placeholder=\"Update your item\"\r\n                            value={input}\r\n                            name=\"text\"\r\n                            className=\"todo-input edit\"\r\n                            onChange={handleChange}\r\n                            ref={inputRef}\r\n                        />\r\n                        <button className=\"todo-button edit\">Update</button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <input\r\n                            text=\"text\"\r\n                            placeholder=\"Add a Todo\"\r\n                            value={input}\r\n                            name=\"text\"\r\n                            className=\"todo-input\"\r\n                            onChange={handleChange}\r\n                            ref={inputRef}\r\n                        />\r\n                        <button className=\"todo-button\">Add todo</button>\r\n                    </>\r\n                )\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, { useState } from 'react';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { AiFillEdit } from 'react-icons/ai';\r\nimport TodoForm from './TodoForm';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return todos.map((todo, index) => {\r\n        return <div\r\n            className={todo.isComplete ? 'todo-row complete' :\r\n                'todo-row'} key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)} >\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <AiFillEdit\r\n                    onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                    className='edit-icon'\r\n                />\r\n                <RiCloseCircleLine\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon'\r\n                />\r\n            </div>\r\n        </div>\r\n    })\r\n}\r\n\r\nexport default Todo\r\n","import React, { useState, useEffect } from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\n\r\nconst TodoList = () => {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n    }, [todos])\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n        console.log(todo, ...todos);\r\n    }\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n        if (localStorage.getItem('todos') === null) {\r\n            localStorage.setItem('todos', JSON.stringify([]));\r\n        } else {\r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTodos(todoLocal);\r\n        }\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n    }\r\n\r\n    const removeTodo = (id) => {\r\n        const removeArr = [...todos].filter(todo => todo.id != id)\r\n\r\n        setTodos(removeArr);\r\n    }\r\n\r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What is your Play?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo\r\n                todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}